package ArduinoML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Actuator;
  private ConceptPresentation props_App;
  private ConceptPresentation props_BinaryExpression;
  private ConceptPresentation props_Block;
  private ConceptPresentation props_Brick;
  private ConceptPresentation props_Button;
  private ConceptPresentation props_Buzzer;
  private ConceptPresentation props_Condition;
  private ConceptPresentation props_Delay;
  private ConceptPresentation props_DigitalAssignement;
  private ConceptPresentation props_DigitalAtomicCondition;
  private ConceptPresentation props_Led;
  private ConceptPresentation props_Sensor;
  private ConceptPresentation props_State;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_SwitchState;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Actuator:
        if (props_Actuator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Actuator = cpb.create();
        }
        return props_Actuator;
      case LanguageConceptSwitch.App:
        if (props_App == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_App = cpb.create();
        }
        return props_App;
      case LanguageConceptSwitch.BinaryExpression:
        if (props_BinaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BinaryExpression");
          props_BinaryExpression = cpb.create();
        }
        return props_BinaryExpression;
      case LanguageConceptSwitch.Block:
        if (props_Block == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Block = cpb.create();
        }
        return props_Block;
      case LanguageConceptSwitch.Brick:
        if (props_Brick == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Brick = cpb.create();
        }
        return props_Brick;
      case LanguageConceptSwitch.Button:
        if (props_Button == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Button = cpb.create();
        }
        return props_Button;
      case LanguageConceptSwitch.Buzzer:
        if (props_Buzzer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Buzzer = cpb.create();
        }
        return props_Buzzer;
      case LanguageConceptSwitch.Condition:
        if (props_Condition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Condition");
          props_Condition = cpb.create();
        }
        return props_Condition;
      case LanguageConceptSwitch.Delay:
        if (props_Delay == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Delay");
          props_Delay = cpb.create();
        }
        return props_Delay;
      case LanguageConceptSwitch.DigitalAssignement:
        if (props_DigitalAssignement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd5d33L, 0x6035c5486edd890dL, "actuator", "", "");
          props_DigitalAssignement = cpb.create();
        }
        return props_DigitalAssignement;
      case LanguageConceptSwitch.DigitalAtomicCondition:
        if (props_DigitalAtomicCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd679eL, 0x6035c5486edd7292L, "sensor", "", "");
          props_DigitalAtomicCondition = cpb.create();
        }
        return props_DigitalAtomicCondition;
      case LanguageConceptSwitch.Led:
        if (props_Led == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Led = cpb.create();
        }
        return props_Led;
      case LanguageConceptSwitch.Sensor:
        if (props_Sensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Sensor = cpb.create();
        }
        return props_Sensor;
      case LanguageConceptSwitch.State:
        if (props_State == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_State = cpb.create();
        }
        return props_State;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Statement");
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.SwitchState:
        if (props_SwitchState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd8d3dL, 0x6035c5486ee121b2L, "state", "", "");
          props_SwitchState = cpb.create();
        }
        return props_SwitchState;
    }
    return null;
  }
}
