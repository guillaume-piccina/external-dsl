package ArduinoML.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Button_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Buzzer_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Delay_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DigitalAssignement_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new DigitalAtomicCondition_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Led_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new State_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new SwitchState_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new App_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new DigitalAssignement_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new DigitalAtomicCondition_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new SwitchState_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd9d2dL), MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd9617L), MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd8f92L), MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd5d33L), MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd679eL), MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd9461L), MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x4d1785670cfbb144L), MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd8d3dL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x33f392d2f391f50eL), MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd5d33L), MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd679eL), MetaIdFactory.conceptId(0x7d30aba23d1348acL, 0xb67656f691260962L, 0x6035c5486edd8d3dL)).seal();
}
